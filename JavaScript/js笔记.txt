一. JavaScript组成：
    ① ECMAScript:欧洲计算机协会，大概每年六月份中旬定制语法规范
    ② DOM:全称Document Object Model  中文全称：文档对象模型
    ③ BOM：全称Browser Object Model  中文全称：浏览器对象模型


二. DOM:Document Object Model 文档对象模型
	1.获取节点方法：
		getElementById：可以通过标签的ID选择器，在js中获取标签 
		可以获取到节点树上任意的节点，需要给节点添加id
		document.getElementById();
		
		getElementsByTagName 通过标签名获取节点，返回类数组
		getElementsByClassName 通过标签的class属性获取节点，返回类数组
		querySelector 通过任意的选择器获取节点

	2.操作节点的属性：
		获取id属性
			var div = document.getElementById("box");
			console.log(div.id);
		获取class属性
			console.log(div.className); 
		
		设置节点的id属性	
			div.id = "xxx";
		设置节点的class属性
			div.className = "xxx";
		
	3.操作节点的文本：
		两种情况：
			① 非表单元素获取文本 使用innerHTML
			② 表单元素获取文本   使用value
		可以对节点的文本进行设置
			① 非表单元素
				selector.innerHTML = "xxxx";
			② 表单书元素
				selector.value ="xxx";

	4.操作节点的样式：
		通过id获取节点：
			var span = document.getElementById("b");
		获取节点的样式：
			console.log(span.style.width);
		设置节点的样式：
			span.style.width = "20px";

	5.节点绑定事件信号量
		<script type="text/javascript">
			var p = document.getElementById("box");
			// 创建一个信号量
			var sum = 12; // 字体大小默认是12
			p.onclick = function() {
				sum++;
				// 设置字体的最大大小为30
				if (sum >= 30) {
					sum = 30;
				}
				// 改变字体大小
				p.style.fontSize = sum + "px";
			}
		</script>

	6.节点的事件：
		事件绑定：
			语法格式：
				element onxxx = function(){
					
				}
				onxxx:事件名称，都是小写
				function：事件处理函数,用户触发事件时会执行一次

	7.节点树：
		获取节点树的html标签：document.documentElement
		获取节点数据的head标签：document.head
		获取节点数的title文本：document.title
		获取节点数的body: document.body

	8.聚焦和失焦事件：	
		一般和表单元素进行使用：
			onfocus:聚焦
			onblur: 失焦
		<script>
			var input = document.getElementById("cur");
			var span = document.getElementById("sp");
			// 鼠标聚焦事件
			input.onfocus = function () {
				input.style.color = 'green';
			}
			
			// 鼠标失焦事件
			input.onblur = function () {
				// 获取输入框中的值
				var txt = input.value;
				// 使用正则判断手机格式是否正确
				if (/^1[3456789]\d{9}/.test(txt) && txt.length == 11) {
					span.style.color = "pink";
					span.innerHTML = "";
				} else {
					span.style.color = "red";
					span.innerHTML = "手机号必须为11位";
				}
			}
		</script>

	9.批量添加事件:
		在特定的场景下，有很多相同的标签或者节点，需要添加相同的事件，可以批量添加事件
		方法一：使用IIFE：
			IIFE:在声明表达式函数的同时立刻马上执行一次
			每一个IIFE都有自己独立的作用域，相互不影响
		var liArr = document.getElementsByTagName("li");
		for (var i = 0; i < liArr.length; i++) {
		// console.log(liArr[i]);
		// 批量绑定事件
		liArr[i].onclick = function () {
			// 定义一个IIFE，用来独立每一个元素的值
		//     +function (index) {
		//         console.log(liArr[index]);
		//     }();
		// }
		// 使用IIFE，用来独立每一个元素的值
			+function (index) {
				liArr[index].onclick = function () {
					liArr[index].style.color = "red";
				}
			}(i);
		}
		console.log("循环语句结束" + i);  // 5
		
		方法二：使用this
		<script>
			// 使用this
			var li = document.getElementsByTagName("li");
			for (var i = 0; i < li.length; i++) {
				li[i].onclick =function () {
					this.style.color = "red";
				}
			}
		</script>

	10.事件处理函数event:
		事件函数执行时，系统自动注入实参，用形参接收【事件对象】
		考虑浏览器的兼容性：
			高级浏览器：谷歌,IE8以上的浏览器--->事件对象返回event
			低级浏览器：IE8以下的浏览器--->事件对象作为BOM对象属性
		短路操作解决浏览器兼容问题
		var e = event || window.event;

	11.获取鼠标的位置：
		/*
		 * screenX和screenY：两者是事件对象属性，主要可以获取鼠标位置。
		 * 获取鼠标位置零零点在【电脑屏幕左上角】
		 *
		 * pageX和pageY:两者是事件对象属性，主要可以获取鼠标位置 获取鼠标位置零零点在网页主体部分左上角
		 * 零零点会随着滚动条滚动而移上去
		 *
		 * clientX和clientY：两者是事件属性，主要获取鼠标位置，获取鼠标位置零零点在可视区域左上角
		 *
		 * offsetX和offsetY:两者是事件属性，主要获取鼠标位置，类似于pageX和pageY，但是鼠标位置零零点
		 *  会受到子元素坐标体系的影响，既鼠标放在那个位置上，零零点就是该位置的左上角
		 * */
		 var inn = document.querySelector(".inner");
		 // 鼠标在整个页面中进行移动
		 document.onmousemove = function (event) {
			 // console.log(event);
			 // 短路操作解决浏览器兼容问题
			 var e = event || window.event;
			 // 零零点电脑屏幕左上角
			 inn.innerHTML = "screenX=" + e.screenX + ", " + "screenY=" + e.screenY + "<br/>";
			 // 零零点网页主体左上角  零零点会随着滚动条滚动而移上去
			 inn.innerHTML += "pageX=" + e.pageX + ", " + "pageY=" + e.pageY + "<br/>";
			 // 零零点可视区域左上角
			 inn.innerHTML += "clientX=" + e.clientX + ", " + "clientY=" + e.clientY + "<br/>";
			 // 鼠标位于那个元素上，零零点就在该元素的左上角
			 inn.innerHTML += "offsetX=" + e.offsetX + ", " + "offsetY=" + e.offsetY + "<br/>";

	12.鼠标常用事件：
		onmousedown()   鼠标按下事件
		onmousemove()   鼠标移动事件
		onmouseup()     鼠标抬起事件
		onmouseenter：鼠标进入事件
		onmouseleave: 鼠标移除事件
		onmouseover   鼠标进入事件
		onmouseout    鼠标移除事件

	13.使用原生js实现拖拽效果：	
		拖拽效果的三板斧：
			① 鼠标按下
			② 鼠标移动
			③ 鼠标抬起
		// 获取div节点
		var cur = document.querySelector(".cur");
		// 添加鼠标按下事件
		cur.onmousedown = function (event) {
			// 短路解决兼容问题
			var e = event || window.event;
			// 使用offset获取图片上鼠标的位置
			var startX = e.offsetX;
			var startY = e.offsetY;
		
			// 鼠标全屏移动事件
			document.onmousemove = function (event1) {
				var e = event1 || window.event;
				// 使用client获取可视区域鼠标的位置
				cur.style.left = e.clientX - startX + "px";
				cur.style.top = e.clientY - startY + "px";
			}
		
			// 鼠标抬起事件
			document.onmouseup = function () {
				document.onmousemove = null;
			}
		}

三. BOM对象  Browser Object Model 浏览器对象模型  也就是window对象
	1.BOM对象的初识：
		<script>
			// BOM:内置的window对象
			// 作为BOM对象属性，可以省略window
			console.log(window);
		
			// 获取地址栏信息
			console.log(window.location.href);
			console.log(location.href);
		
			// 获取屏幕的信息
			console.log(window.screen);
			console.log(window.screen.width);
			console.log(window.screen.height);
			console.log(screen.height);
		
			// 获取浏览器信息
			console.log(window.navigator);
			console.log(window.navigator.userAgent);
			console.log(navigator.userAgent);
		</script>
		
	2.定时器：
		定时器：每隔一段时间执行一次回调函数  setInterval(callback,time) 1s=1000ms 单位为毫秒
		定时器是一个异步语句，很耗时间
		异步语句有一个很大的特征：先执行异步语句后面的代码，回首在执行异步语句
		console.log(setInterval(function () {
		    console.log("定时器");
		}, 1000));
		
		// 定时器后面的代码
		console.log("异步语句后面的代码");
		
		// 清除定时器
		clearInterval(1);
	
四. jQuery框架
	1. 类名操作：
	    addClass:  给匹配的节点添加元素
	        $("div").addClass("bobxxx");  给div添加类名bobxxx
	    removeClass: 给匹配的节点移除元素
	        $("div").removeClass("bobxxx"); 给div移除类名bobxxx
		index:获取匹配节点的索引值
			console.log($(".cur").index());
		each:遍历全部匹配的节点  each(callback) 里面有一个回调函数
								该回调函数有两个参数，一个是节点的索引值，一个是节点
			$("li").each(function (index, element) {
			    // index:索引值
			    // element:匹配的节点
			    console.log(index, element);
			    $(element).css({"color": "red", "width": "100"});
			});
	
	2. 特效函数:
	    原理:动态修改高度
	    slideDown：向下滑动  slideDown(time, callback)
	            第一个参数：代表每一次动画时间 【可有可无】
	            第二个参数：回调函数 动画结束后立即执行一次 【可有可无】
	
	    slideUp：向上卷起
	
	    原理:动态修改透明度
	    fadeOut: 淡出
	    fadeout(time, callback)
	            第一个参数：动画每一次需要的时间 单位毫秒  【可有可无】
	            第二个参数：回调函数        【可有可无】
	    fadeIn:	 淡入
	
	3. 节点文本：
		非表单元素的文本：html()
		表达元素的文本：val()
		【可以对节点的文本进行获取和设置】
		
	4. 节点属性：
		attr:获取节点的属性值，也可以修改节点的属性值
			// 获取属性值
			console.log($("input:eq(1)").attr("type"));
			
			// 修改属性值
			$("input:eq(1)").attr("type", "text");
			
			// 获取图片属性值
			console.log($("img").attr("src"));
			
			// 修改图片属性值
			$("img").attr("src", "img/2.jpg");
			
	5. 节点样式：
		css()方法，里面传递一个json格式的数据，使用链式语法
			$("div").css({"color": "red", "background":"cyan", "fontSize": 40});
	
	6. jQuery独有选择器：
		:first:获取节点匹配的第一个元素
		:last:获取节点匹配的第二个元素
		:odd:匹配奇数
		:even:匹配偶数
		:gt(index)：获取匹配节点大于某一个索引值
		:lt(index): 获取匹配节点小于某一个索引值
		:eq(index): 获取匹配节点，某一个准确索引值节点
		
	7. jQuery节点关系：
		parent:获取到某一个匹配节点的父节点
		siblings:获取兄弟姐妹节点
		children:获取某个节点的子节点
		this:上下文，当前的节点
	
	8. jQuery事件的绑定：
		jQuery事件的绑定，没有on这个关键字
		绑定单击事件:
			$(selector).click(function(){
				函数执行的内容;
			});
		绑定的事件有:
			mouseenter(鼠标进入)
			mouseleave(鼠标离开)
	9. animate动画函数：
		语法格式：
			$(selector).animate(json, time, callback);
			第一个参数【必有】：JSON格式用来设置动画最终完成的样式属性值
			第二个参数【可有可无】:动画时间的设置 单位毫秒
			第三个参数【可有可无】:当动画执行完毕后立即执行一次
		注意：
			① animate函数很多属性都支持，但是颜色属性不支持
			② 节点的可以绑定多个动画，按照书写顺序依次完成
	
	10. 动画积累问题：
		解决动画积累问题  在动画函数前面加上stop(true)
		// 给第一个按钮绑定单击事件
        $("button:eq(0)").click(function () {
            $("div").stop(true).animate({"left": 200});
        });

        // 给第二个按钮绑定单击事件
        $("button:eq(1)").click(function () {
            $("div").stop(true).animate({"left": 0});
        });

五. JSON数据格式	
	json是键值对格式  键需要加上双引号 值可以是任意类型
	var info = {
	    "name": "ene",
	    "age": 123
	}
	
	// 读取json数据
	console.log(info.name);
	console.log(info.age);
	console.log(info["name"]);
	console.log(info["age"]);
	
	// 修改json数据
	info.name="eee";
	info["age"] = 1211;
	console.log(info)
	
	// json添加键值对
	info.sex="男";
	console.log(info);

六. switch语句
	格式：
		switch (变量){
			case 条件1:
				代码块;
			break;
			case 条件2:
				代码块;
			break;
			case 条件n:
				代码块;
			break;
			default:
				代码块;
			break;
		}

七. 闭包
	闭包：一个可以访问其他作用域中的变量的函数称为闭包
	<script>
	    function func(x) {
	        console.log("这是外部函数");
	        // 内部函数
	        function inner(y) {
	            console.log("内部函数执行");
	            console.log(x + y);
	        }
	
	        inner(200);
	    }
	
	    func(100);
	</script>

八. JS变量
    (1)命名规范
		① 可以是数字，字母，下划线，美元符号
		② 不能以数字开头
		③ 不可以是关键字，保留字
    (2)变量在声明后，没有赋值，初始值为undefined
	(3)声明变量，提升到当前作用域最上方

九. JS函数
	(1) IIFE
		IIFE:在声明表达式函数的同时立刻马上执行一次,每一个IIFE都有自己独立的作用域，相互不影响
		var fun = function(){
			console.log(表达式函数执行"");
		}();
	
		关键字形式的函数变为表达式函数的方法
			①  +号可以将关键字形式的函数转为表达式形式的函数 在关键字形式的函数前面加+
			②  -号可以将关键字形式的函数转为表达式形式的函数 在关键字形式的函数前面加-
			③  !号可以将关键字形式的函数转为表达式形式的函数 在关键字形式的函数前面加!
			④  ()号可以将关键字形式的函数转为表达式形式的函数  用()将关键字形式的函数进行包裹
		+function fun1() {
			console.log("+号可以将关键字形式的函数转为表达式形式的函数");
		}();
		
		-function fun2() {
			console.log("-号可以将关键字形式的函数转为表达式形式的函数");
		}();
		
		!function fun3() {
			console.log("!号可以将关键字形式的函数转为表达式形式的函数");
		}();
		
		(function fun4() {
			console.log("()号可以将关键字形式的函数转为表达式形式的函数");
		})();
		
	(2) 表达式形式的函数【匿名函数】
		var fun = function(){
			console.log("这是表达式形式的函数");
		}
		fun();  // 调用
	
	(3) 递归函数  自己调用自己
		<script>
		    function fuc() {
		        console.log("递归");
		        fuc();
		    }
		</script>
	
	(4) 关键字形式的函数与表达式形式的函数的区别
		① 表达式形式的函数不可以在函数声明之前进行调用
		② 关键字形式的函数可以在函数声明之前进行调用,解析器会将函数的声明提升到当前作用域的最上方
	
	函数实战：计算100-1000之间的水仙花数
		Math对象     Math.pow 立方   parseInt 取整
		function isshuixianhua(num) {
			var ge = num % 10;
			var shi = parseInt(num / 10) % 10;
			var bai = parseInt(num / 100);
			var result = Math.pow(ge, 3) + Math.pow(shi, 3) + Math.pow(bai, 3);
			// console.log(result);
			if (result == num) {
				return true;
			} else {
				return false;
			}
		}
	(5) 回调函数
		一个函数作为另一个函数的参数，这样的函数称为回调函数
		function pormise(a, b, callback) {
		    callback();
		}
		
		pormise(1, 2, function () {
		    console.log("回调函数调用");
		})
	
	(6) 类数组对象arguments
		函数体中拥有一个引用数据类型arguments【类数组对象】
		类数组对象不是数组，只能使用数组的length属性，不能使用方法
		存在意义：
				在函数没有形参的情况下，在函数体中可以获取到传递给函数的实参
	
十. 三元运算符
		三元运算符: A?B:C 如果A为真，返回B，否则返回C
	
十一. 数据类型
		① 数据类型的判断
			typeof检测数据的类型
			空对象类型 null   Null类型 返回object
			
		② 数据类型的转换
			内置函数 parseInt 将字符串中的数字转为数字  精确到整数
			内置函数 parseFloat	 将字符串中的数字转为数字  精确到小数
			NaN和0会隐式转为布尔值为false,其他数字为true
			空字符   ---- > false
			非空字符串 ---> true
			未定义类型和Null转为布尔值 都为false

十二. 数学对象
	console.log(Math.PI);
	console.log(Math.E);
	
	// 获取数字的绝对值
	console.log(Math.abs(122));
	
	// 获取一个数字的N次幂
	console.log(Math.pow(3,8));
	
	// 随机一个0到1之间的小数
	console.log(Math.random(0,1));

十三. 数组
		js使用[]表示数组
		数组中可以存储任意类型的数据
		可以将数组赋值给变量
		读取数据:可以使用枚举法获取数据里的元素 元素的索引越界，程序不会报错，返回undefined
		
		// 修改数据
		arr1[1] = "号";
		console.log(arr1);
		
		// 添加数据
		arr1[5] = false;
		console.log(arr1);
	
	数组常用的方法和属性：
		获取数组的长度 length
		push:数组尾处添加一个或多个元素
		pop:数组尾处移除一个元素
		unshift：数组的头部添加一个或者多个元素
		shift:数组头部移除一个元素
		join: 将数组转为字符串
		reverse:将数组元素倒置
		indexOf:索引值  获取数组元素的索引值  如果获取的元素不在数组中，返回-1
		includes:包含   检测当前是否在数组中，如果存在返回true,否则返回false
		slice:从起始数组当中切割出一个新的数组  slice(起始索引值，结束索引值)  对原数组没有影响
			包含起始位置的元素，不包含结束位置的元素
		splice:可以对数组进行切割， 插入，替换 对原数组有影响
			传递两个参数:第一个参数是起始位置的索引值，第二个代表要切割的长度
			
			<script>
			    var arr = [1, 2, 3, 5, 6, 7];
			    console.log(arr.length);  // 获取数组的长度 length
			</script>
			<script>
			    var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
			    for (i = 0; i < arr.length; i++) {
			        console.log(arr[i]);
			    }
			</script>
			<script>
			    /*
			    * push:数组尾处添加一个或多个元素
			    * pop:数组尾处移除一个元素
			    *
			    * */
			    var arr = [1, 2, 3, 4, 5, 6, 6, 7];
			    arr.push(56);
			    arr.push("4", 'g');
			    arr.pop();  // 删除数据的最后一个元素
			    console.log(arr);
			    console.log("-----------------------------");
			</script>
			
			<script>
			    /*
			    *  unshift：数组的头部添加一个或者多个元素
			    *  shift:数组头部移除一个元素
			    *
			    * */
			    var arr = [12, 3, 4, 5, 6, 7, 8, 9];
			    arr.unshift("哈哈");
			    arr.unshift("hao", "gh", "ghhhh");
			    // arr.shift("ghhhh");
			    arr.shift();   // 删除数据的第一个元素
			    console.log(arr);
			    console.log("------------------------------");
			</script>
			
			<script>
			    /*
			    *  join: 将数组转为字符串
			    *   reverse:将数组元素倒置
			    *
			    * */
			    var arr = [1, 2, 3, 4, 5, 6, 7, 8];
			    var str = arr.join("*");
			    var str1 = arr.join("");
			    console.log(str1);
			    console.log(str);
			    console.log("*********************");
			    var arr1 = [1, 2, 3, 4, 5];
			    arr1.reverse();
			    console.log(arr1);
			    console.log("==========================");
			</script>
			
			<script>
			    /*
			    *  indexOf:索引值  获取数组元素的索引值  如果获取的元素不在数组中，返回-1
			    *  includes:包含   检测当前是否在数组中，如果存在返回true,否则返回false
			    * */
			    var arr = [1, 2, 3, 4, 5, 6];
			    console.log(arr.indexOf(1));
			    console.log(arr.indexOf(7));
			    console.log(arr.includes(1));
			    console.log("------------------------");
			</script>
			
			<script>
			    /*
			    *  slice:从起始数组当中切割出一个新的数组  slice(起始索引值，结束索引值)  对原数组没有影响
			    *       包含起始位置的元素，不包含结束位置的元素
			    *  splice:可以对数组进行切割， 插入，替换 对原数组有影响
			    *       传递两个参数:第一个参数是起始位置的索引值，第二个代表要切割的长度
			    * */
			    var arr = [1, 2, 3, 4, 5];
			    var new_arr = arr.slice(3);
			    console.log(new_arr);
			    var new_arr1 = arr.slice(2, 4);  // 3,4
			    console.log(new_arr1);
			    console.log("-----------------------------------------");
			
			    // splice
			    var arr1 = [1, 2, 4, 5, 6, 67];
			    // 切割
			    // var newArr = arr1.splice(2);
			    // console.log(newArr);
			    console.log("=============================================");
			    // var newArr1 = arr1.splice(2,3);
			    // console.log(newArr1);
			
			    // 插入  没切割出来进行添加
			    // var arr_ = arr1.splice(2,0,"哈哈");
			    // console.log(arr_);
			    // console.log(arr1);
			
			    // 替换   切割出来进行替换
			    var newArr = arr1.splice(2, 2, "好", "en");
			    console.log(newArr);
			    console.log(arr1);
			</script>
十四. 循环语句
	① break语句	
		<script>
		    for (var m = 1; m <= 6; m++) {
		        console.log(m);
		        if (m % 2 == 0) {
		            break
		        }
		    }
		</script>
	② do-while语句
		格式:
		   do{
		   循环体;
		 }while(判断条件);
		 
		do{
		     var a = parseInt(Math.random()*10);
		     var b = parseInt(Math.random()*10);
		 }while (a==0&&b==0);
		console.log(a,b);
	
	③ while语句
		 格式:
		   条件一般为布尔值
		   while (条件){
		       循环体;
		 }
		var i = 1;
		while (i <= 10) {
		    if (i%2==0){
		        console.log(i);
		    }
		    i++;
		}

十五. 正则表达式
	(1) 边界符
		^ :开头
		$ :结尾
	var str = "wev哈哈哈哈哈";
	console.log(/^wev/.test(str));
	console.log(/哈哈$/.test(str));
	
	(2) 分组与汉字
		 分组：()  ()中的内容为一个整体
		 汉字：[\u4e00-\u9fa5]
		 
		 var str = "adfa";
		 console.log(/(a){1}/.test(str));
		 
		 var str_ = "哈哈哈哈哈111";
		 console.log(str_.replace(/[\u4e00-\u9fa5]+/g, "k"));
	
	(3) 量词	
		{n}  硬性量词  对应零次或者n次
		{n,m} 软性量词  至少出现n次但不超过m次（中间不能有空格）
		{n,}  软性量词  至少出现n次
		?      软性量词 出现零次或者一次
		*       软性量词  出现零次或者多次（任意次）
		+       软性量词      出现一次或者多次（至少一次）
		
		// {n}  硬性量词  n代表数字
		var str = "哈哈33456哈哈00000";
		var arr = str.match(/\d{3}/g);
		console.log(arr);
		
		// 软性量词 {n, m}
		var str_ = "34455法撒旦发生哦哦0 4456";
		console.log(str_.replace(/\w{4,20}/g, "x"));
		
		// 软性量词 {n,}
		var str_r = "adt发噶魔法卡感觉撒酒疯8958650-";
		var arr_ = str_r.match(/\d{1,}/g);
		console.log(arr_);
	
	(4) 修饰符
		g: 全局匹配
		i: 大小写不敏感匹配
		
		var url = "https://www.baidu.com";
		var arr = url.match(/[a-z]+/g);
		console.log(arr);
		
		var url_ = "hTTps://wWW.Xin.Com";
		var arr_ = url_.match(/[a-z]+/ig);
		console.log(arr_);
	
	(5) 预定义类
		   \d  匹配任意的数字[0-9]
		   \D  匹配任意一个不是数字的字符
		   \s  匹配空白
		   \S  匹配任意不是空白的字符
		   \w  匹配任意的字母，下划线或者数字
		   \W  匹配任意的数字，字母下划线以外的内容
		
	(6) 正则字符集
		① 范围类:有时匹配的东西过多，类型又相同，全部输入太麻烦，可以在中间加个横线
			[0-9]  [A-Z]  [a-z]
			var str = "123456709哈哈哈，哈哈wc4564543543";
			var arr = str.match(/[0-9]+/g);
			console.log(arr);
		
		② 简单类：把多个字符聚集在一起进行匹配，只能匹配某一个符合条件字符
			var str = "asdfaertyhfjakof";
			var arr = str.match(/[asd]er/g)
			console.log(arr);
		
		③ 组合类：将多个范围类放在一起进行匹配
			var str = "A3455adfsafsadfas45456fdasf45FASFGSADFASF";
			var arr = str.match(/[A-Za-z0-9]+/)
			console.log(arr);
	
	(7) 正则常用方法
		正则表达式书写的时候是由//,这两个//称为定界符 属于引用数据类型
		
		① 字符串split方法结合正则表达式使用
			var str = "ert rtt     tyyuuu    yyy";
			var arr = str.split(/\s+/);  // \s 一个空格  +多个
			console.log(arr);
		
		② match:字符串方法，获取第一个符合条件的字符，并返回一个数组
			var str = "哈哈哈哈好啊好";
			console.log(str.match(/好/g))  // 匹配所有的好  g:修饰符，全局匹配  glob的简写
		
		③ search:属于字符串方法，获取第一个满足条件的索引值
			var str = "adsafsadfs哈哈";
			console.log(str.search(/哈哈/));
		
		④ replace 进行符合条件的字符串的替换
			var str = "爱得发疯阿斯顿发射点发射点范德萨";
			console.log(str.replace(/发/g, "fa"));   // 将所有的发替换为fa
			console.log("-----------------------------");
		
		⑤ exec:在目标字符串中执行一次匹配 返回一个数组
		⑥ test: 检测正则表达式当中的数据是否在目标字符串中 有返回true 否则返回false
			var str = "aaaabccccc";
			var reg = /abc/;
			console.log(reg.exec(str));  // 返回一个数组
			console.log("-----------==================");
			var str1 = "adfasdfsadfsfert8ew945ew4-859u";
			var reg1 = /zz/
			console.log(reg1.test(str1));

十六. 字符串
	字符串的属性和方法
		① length属性：获取到字符串总字符的个数
		② toLowerCase:将字符串中英文字母变为小写
		③ toUpperCase：将字符串中英文字母变为大写
		④ search:获取字符的索引值
		⑤ split:可以通过某一个字符，将字符串切割为一个数组
		⑥ substring: 在父串当中切割出一个子串  substring(起始索引值, 结束索引值)
				包含起始索引值，不包含结束索引值
		⑦ substr：从父串当中切割出一个子串
				substr(起始位置,切割长度);
		
		⑧ replace:替换某一个字符串中符合条件的字符进行替换
		⑨ match:将字符串中符合条件的第一个字符返回

十七. 字面量
	① 整数，浮点数
	// 小数注意事项  由于0.1和0.2在进行计算时，没办法整除，保留17位小数 遵循IEEE754浮点数算数标准
	console.log(0.1 + 0.2);
	② 特殊值
		js中，数字有范围: -2^53 ~ 2^53,如果超出了这个范围，使用特殊值Infinity(无穷大)表示
		Infinity也有正负值之分
		console.log(Infinity);
		console.log(-Infinity);
		
		NaN特殊值
			console.log(0/0);
			console.log(12/0);  // Infinity  分子不为0，分母为0，认为分子是趋近于0的数